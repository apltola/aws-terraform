name: Deploy to Staging

on:
  push:
    branches:
      - master
      - production

env:
  ECR_REPO: ${{ secrets.ECR_REPO }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: eu-north-1

jobs:
  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          cd app
          npm install
          npm run build
          npm run test:ci

  docker-build-and-push:
    name: 'Docker Build and Push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Add SHORT_SHA env
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      - name: Docker build, tag and push
        run: |
          cd app
          docker build --compress -t $ECR_REPO:$SHORT_SHA .
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 188405059934.dkr.ecr.eu-north-1.amazonaws.com
          docker push $ECR_REPO:$SHORT_SHA
          docker tag $ECR_REPO:$SHORT_SHA $ECR_REPO:latest
          docker push $ECR_REPO:latest

  staging-plan:
    name: 'Staging Plan'
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Terraform Plan Staging
        run: |
          cd deploy
          terraform init
          terraform workspace select staging || terraform workspace new staging
          terraform plan

  staging-apply:
    name: 'Staging Apply'
    needs: [docker-build-and-push, staging-plan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test if terraform exists
        run: terraform --help
